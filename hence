#!/usr/bin/php -q
<?php
define('FUNCTION_PREFIX', 'xyzzy_');
define('DEFAULT_TARGET', 'c');

$generate = array(
    'emit_function' => array(
        'c'   => function($name, $functions) {
            if (count($functions) > 1) {
                echo '}', PHP_EOL;
                echo PHP_EOL;
            }

            echo 'void ' . FUNCTION_PREFIX . str_replace('-', '_', $name) .
                '(void)', PHP_EOL;
            echo '{', PHP_EOL;
        },
        'ch8' => function($name, $functions) {
            if (count($functions) > 1) {
                echo '    ret', PHP_EOL;
                echo PHP_EOL;
            }

            echo FUNCTION_PREFIX . str_replace('-', '_', $name) . ':',
                PHP_EOL;
        },
        'js'  => function($name, $functions) {
            if (count($functions) > 1) {
                echo '};', PHP_EOL;
                echo PHP_EOL;
            }

            echo 'var ' . FUNCTION_PREFIX . str_replace('-', '_', $name) .
                ' = function() {', PHP_EOL;
        },
        'php' => function($name, $functions) {
            if (count($functions) > 1) {
                echo '}', PHP_EOL;
                echo PHP_EOL;
            }

            echo 'function ' . FUNCTION_PREFIX . str_replace('-', '_', $name) .
                '()', PHP_EOL;
            echo '{', PHP_EOL;
        }
    ),

    'emit_function_call' => array(
        'c'   => function($name) {
            if ($name == 'call-native') {
                echo '    __call_native__();', PHP_EOL;
            } else {
                echo '    ' . FUNCTION_PREFIX . str_replace('-', '_', $name) .
                    '();', PHP_EOL;
            }
        },
        'ch8' => function($name) {
            if ($name == 'call-native') {
                echo '    call __call_native__', PHP_EOL;
            } else {
                echo '    call ' . FUNCTION_PREFIX .
                    str_replace('-', '_', $name), PHP_EOL;
            }
        },
        'js'  => function($name) {
            if ($name == 'call-native') {
                echo '    libhence.__call_native__();', PHP_EOL;
            } else {
                echo '    ' . FUNCTION_PREFIX . str_replace('-', '_', $name) .
                    '();', PHP_EOL;
            }
        },
        'php' => function($name) {
            if ($name == 'call-native') {
                echo '    __call_native__();', PHP_EOL;
            } else {
                echo '    ' . FUNCTION_PREFIX . str_replace('-', '_', $name) .
                    '();', PHP_EOL;
            }
        }
    ),

    'emit_push' => array(
        'c'   => function($string) {
            if (is_numeric($string) && ($int_val = intval($string)) >= -32768 &&
                $int_val <= 32767) {
                echo '    __pushi__(' . $int_val . ');', PHP_EOL;
            } else {
                echo '    __push__("' . $string . '");', PHP_EOL;
            }
        },
        'ch8' => function($string) {
            if (is_numeric($string)) {
                $int_val = intval($string);
                if ($int_val < 0) {
                    $int_val += 256;
                }

                echo '    ld v0,' . $int_val, PHP_EOL;
                echo '    call __pushi__', PHP_EOL;
            } else {
                $l1 = make_label();
                $l2 = make_label();

                echo '    ld i,' . $l1, PHP_EOL;
                echo '    jp ' . $l2, PHP_EOL;
                echo $l1 . ':', PHP_EOL;
                for ($i = 0; $i < strlen($string); ++$i) {
                    echo '    db ' . ord($string{$i}) . "\t; " . $string{$i},
                        PHP_EOL;
                }
                echo "    db 0\t; NUL", PHP_EOL;
                echo $l2 . ':', PHP_EOL;
                echo '    call __push__', PHP_EOL;
            }
        },
        'js'  => function($string) {
            echo '    libhence.__push__("' . $string . '");', PHP_EOL;
        },
        'php' => function($string) {
            echo '    __push__("' . $string . '");', PHP_EOL;
        }
    ),

    'emit_comment' => array(
        'c'   => function($comment) {
            echo '    /* ' . $comment . ' */', PHP_EOL;
        },
        'ch8' => function($comment) {
            echo '    ; ' . $comment, PHP_EOL;
        },
        'js'  => function($comment) {
            echo '    // ' . $comment, PHP_EOL;
        },
        'php' => function($comment) {
            echo '    // ' . $comment, PHP_EOL;
        }
    ),

    'emit_preamble' => array(
        'c'   => function() {
            echo '#include "libhence.h"', PHP_EOL;
            echo PHP_EOL;

            echo '#define FUNCTION_PREFIX' . "\t" . FUNCTION_PREFIX, PHP_EOL;
            echo PHP_EOL;

            echo '#include "h0.h"', PHP_EOL;
            echo PHP_EOL;
        },
        'ch8' => function() {
            echo 'include(libhence.m4)dnl', PHP_EOL;
            echo 'dnl', PHP_EOL;

            echo 'define(FUNCTION_PREFIX,' . FUNCTION_PREFIX . ')dnl', PHP_EOL;
            echo 'dnl', PHP_EOL;
        },
        'js'  => function() {
            echo "var libhence = require('./libhence');", PHP_EOL;
            echo PHP_EOL;
        },
        'php' => function() {
            echo '<?php', PHP_EOL;
            echo "require_once 'libhence.php';", PHP_EOL;
            echo PHP_EOL;
        }
    ),

    'emit_postscript' => array(
        'c'   => function($functions) {
            if (count($functions) > 0) {
                echo '}', PHP_EOL;
                echo PHP_EOL;
            }

            echo 'struct Function Functions[] = {', PHP_EOL;
            for ($i = 0; $i < count($functions); ++$i) {
                echo '    { "' . $functions[$i] . '", ' .
                    FUNCTION_PREFIX . str_replace('-', '_', $functions[$i]) .
                    ' },', PHP_EOL;
            }
            echo '    { NULL, NULL }', PHP_EOL;
            echo '};', PHP_EOL;
            echo PHP_EOL;

            echo '/* entry point */', PHP_EOL;
            echo 'int main(void)', PHP_EOL;
            echo '{', PHP_EOL;
            echo '    __init__();', PHP_EOL;
            echo '    __call_native_init__();', PHP_EOL;
            echo PHP_EOL;

            echo '    ' . FUNCTION_PREFIX . $functions[count($functions) - 1] .
                '();', PHP_EOL;
            echo PHP_EOL;

            echo '    __call_native_fini__();', PHP_EOL;
            echo PHP_EOL;

            echo '    __depth__();', PHP_EOL;
            echo '    return (__popi__() > 0) ? (__popi__()) : (0);', PHP_EOL;
            echo '}', PHP_EOL;
        },
        'ch8' => function($functions) {
// XXX !
            if (count($functions) > 0) {
                echo '    ret', PHP_EOL;
                echo PHP_EOL;
            }

            echo '; entry point', PHP_EOL;
            echo 'main:', PHP_EOL;
            echo '    call __init__', PHP_EOL;
            echo '    call __call_native_init__', PHP_EOL;
            echo PHP_EOL;

            echo '    call ' . FUNCTION_PREFIX .
                $functions[count($functions) - 1], PHP_EOL;
            echo PHP_EOL;

            echo '    call __call_native_fini__', PHP_EOL;
            echo PHP_EOL;

            echo '    call __depth__', PHP_EOL;
            echo '    ; ...', PHP_EOL;
            echo '    ret', PHP_EOL;
        },
        'js'  => function($functions) {
            if (count($functions) > 0) {
                echo '};', PHP_EOL;
                echo PHP_EOL;
            }

            echo 'Functions = {', PHP_EOL;
            for ($i = 0; $i < count($functions) - 1; ++$i) {
                echo "    '" . $functions[$i] . "': " .
                    FUNCTION_PREFIX . str_replace('-', '_', $functions[$i]) .
                    ",", PHP_EOL;
            }
            echo "    '" . $functions[count($functions) - 1] . "': " .
                FUNCTION_PREFIX .
                str_replace('-', '_', $functions[count($functions) - 1]),
                PHP_EOL;
            echo '};', PHP_EOL;
            echo PHP_EOL;

            echo '// entry point', PHP_EOL;
            echo FUNCTION_PREFIX .
                str_replace('-', '_', $functions[count($functions) - 1]) .
                '();', PHP_EOL;
            echo PHP_EOL;

            echo 'libhence.__depth__();', PHP_EOL;
            echo 'process.exit((libhence.__pop__() | 0 > 0) ? ' .
                '(libhence.__pop__() | 0) : (0));', PHP_EOL;
        },
        'php' => function($functions) {
            if (count($functions) > 0) {
                echo '}', PHP_EOL;
                echo PHP_EOL;
            }

            echo '$Functions = array(', PHP_EOL;
            for ($i = 0; $i < count($functions) - 1; ++$i) {
                echo "    '" . $functions[$i] . "' => '" .
                    FUNCTION_PREFIX . str_replace('-', '_', $functions[$i]) .
                    "',", PHP_EOL;
            }
            echo "    '" . $functions[count($functions) - 1] . "' => '" .
                FUNCTION_PREFIX .
                str_replace('-', '_', $functions[count($functions) - 1]) . "'",
                PHP_EOL;
            echo ');', PHP_EOL;
            echo PHP_EOL;

            echo '// entry point', PHP_EOL;
            echo FUNCTION_PREFIX .
                str_replace('-', '_', $functions[count($functions) - 1]) .
                '();', PHP_EOL;
            echo PHP_EOL;

            echo '__depth__();', PHP_EOL;
            echo 'exit((int) (__pop__() > 0) ? ((int) __pop__()) : ' .
                '(0));', PHP_EOL;
        }
    )
);

$label_no = 0;

function make_label() {
  global $label_no;

  return 'L' . ++$label_no;
}

function syntax_error($line_no) {
    file_put_contents('php://stderr', 'Syntax error on line ' . $line_no .
        PHP_EOL);
    exit(1);
}

function main($argc, $argv)
{
    global $generate;

    $shortopts = '';
    $shortopts .= 't:';		// target

    $longopts = array(
        'target:'
    );

    $options = getopt($shortopts, $longopts);

    $target = DEFAULT_TARGET;

    foreach (array_keys($options) as $option) {
        switch ($option) {
        case 't':
        case 'target':
            switch ($options[$option]) {
            case 'c':
            case 'ch8':
            case 'js':
            case 'php':
                $target = $options[$option];
                break;
            default:
                file_put_contents('php://stderr', "Invalid target: '" .
                    $options[$option] . "'" . PHP_EOL);
                exit(1);
            }
            break;
        default:
            file_put_contents('php://stderr', "Unrecognised option: '" .
                $option . "'" . PHP_EOL);
            exit(1);
        }
    }

    if (empty($target)) {
        file_put_contents('php://stderr', 'No target specified' . PHP_EOL);
        exit(1);
    }

    foreach ($options as $option => $value) {
        while ($k = array_search('-' . $option . $value, $argv)) {
            if ($k) {
                unset($argv[$k]);
            }
        }

        while ($k = array_search('-' . $option, $argv)) {
            if ($k) {
                unset($argv[$k]);
                unset($argv[$k + 1]);
            }
        }

        while ($k = array_search('--' . $option . '=' . $value, $argv)) {
            if ($k) {
                unset($argv[$k]);
            }
        }

        while ($k = array_search('--' . $option, $argv)) {
            if ($k) {
                unset($argv[$k]);
                unset($argv[$k + 1]);
            }
        }
    }
    $argv = array_merge($argv);

    if (count($argv) < 2) {
        file_put_contents('php://stderr', 'No input file(s) specified' .
            PHP_EOL);
        exit(1);
    }

    $functions = array();

    $in_function = FALSE;

    if (count($argv) > 1) {
        $generate['emit_preamble'][$target]();
    }

    for ($argn = 1; $argn < count($argv); ++$argn) {
        $source_code = file_get_contents($argv[$argn]);

        $source_code_array = explode(PHP_EOL, $source_code);

        $in_comment = $in_qstring = FALSE;

        for ($line_no = 0; $line_no < count($source_code_array); ++$line_no) {
            $line = $source_code_array[$line_no];

            $stack = array();

            $token = '';

            $in_function_declaration = FALSE;

            for ($i = 0; $i < strlen($line); ++$i) {
                $c = $line{$i};

                switch ($c) {
                case '[':
                    if ($in_function_declaration) {
                        $in_function_declaration = FALSE;
                        $in_function = TRUE;
                        $functions[] = $token;
                        $generate['emit_function'][$target]($token,
                            $functions);
                        $in_comment = TRUE;
                        $token = $c;
                    } else if ( !$in_comment) {
                        $in_comment = TRUE;
                        $token .= $c;
                    } else {
                        $token .= $c;
                    }
                    break;
                case ']':
                    if ($in_function_declaration) {
                        syntax_error($line_no + 1);
                    } else if ($in_comment) {
                        $in_comment = FALSE;
                        $token .= $c;
                        $stack[] = $token;
                        $token = '';
                    } else if ($in_qstring) {
                        $token .= $c;
                    } else {
                        syntax_error($line_no + 1);
                    }
                    break;
                case '\'':
                    if ($in_function_declaration) {
                        $in_function_declaration = FALSE;
                        $in_function = TRUE;
                        $functions[] = $token;
                        $generate['emit_function'][$target]($token,
                            $functions);
                        $in_qstring = TRUE;
                        $token = $c;
                    } else if ( !$in_comment) {
                        if ( !$in_qstring) {
                            $in_qstring = TRUE;
                            $token .= $c;
                        } else {
                            $in_qstring = FALSE;
                            $token .= $c;
                            $stack[] = $token;
                            $token = '';
                        }
                    } else {
                        $token .= $c;
                    }
                    break;
                case ' ':
                    if ($in_function_declaration) {
                        $in_function_declaration = FALSE;
                        $in_function = TRUE;
                        $functions[] = $token;
                        $generate['emit_function'][$target]($token,
                            $functions);
                        $token = '';
                    } else if ($in_comment || $in_qstring) {
                        $token .= $c;
                    } else if (strlen($token) > 0) {
                        $stack[] = $token;
                        $token = '';
                    }
                    break;
                default:
                    if ($i == 0) {
                        if (stripos('ABCDEFGHIJKLMNOPQRSTUVWXYZ_', $c) !==
                            FALSE) {
                            $in_function_declaration = TRUE;
                            $token .= $c;
                        } else {
                            syntax_error($line_no + 1);
                        }
                    } else if ($in_function_declaration) {
                        if (stripos('-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_',
                            $c) !== FALSE) {
                            $token .= $c;
                        } else {
                            syntax_error($line_no + 1);
                        }
                    } else {
                        $token .= $c;
                    }
                }
            }
            if ($in_function_declaration) {
                $in_function_declaration = FALSE;
                $in_function = TRUE;
                $functions[] = $token;
                $generate['emit_function'][$target]($token, $functions);
            } else {
                if (strlen($token) > 0) {
                    $stack[] = $token;
                }
            }

            if ($in_comment || $in_qstring) {
                syntax_error($line_no + 1);
            }

            while (count($stack) > 0) {
                $token = array_pop($stack);
                if ($token{0} == '\'' && $token{strlen($token) - 1} == '\'') {
                    $generate['emit_push'][$target](
                        substr($token, 1, strlen($token) - 2));
                } else if ($token{0} == '[' &&
                    $token{strlen($token) - 1} == ']') {
                    $generate['emit_comment'][$target](
                        substr($token, 1, strlen($token) - 2));
                } else {
                    $generate['emit_function_call'][$target]($token);
                }
            }
        }
    }

    if ($in_function) {
        $generate['emit_postscript'][$target]($functions);
    }

    return 0;
}

exit(main($argc, $argv));
